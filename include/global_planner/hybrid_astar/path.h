#ifndef PATH_H
#define PATH_H

#include <iostream>
#include <cstring>
#include <vector>

#include <ros/ros.h>
#include <tf/transform_datatypes.h>
#include <nav_msgs/Path.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseArray.h>
#include <visualization_msgs/MarkerArray.h>

#include "global_planner/hybrid_astar/pose2d.h"
#include "global_planner/hybrid_astar/constants.h"
#include "global_planner/hybrid_astar/helper.h"
namespace HybridAStar {
/*!
   \brief A class for tracing and visualizing the path generated by the Planner
*/
class Path {
 public:
  /// The default constructor initializing the path object and setting publishers for the same.
  Path(bool smoothed = false) {

    // CONFIGURE THE CONTAINER
    path.header.frame_id = "path";
  }

  void updatePath(std::vector<Pose2D> nodePath);

  /// YT printPath
  void PrintPath();

  /// YT setPath
  void setPath(int index, float x, float y);

  /// Path data structure for visualization
  nav_msgs::Path path;

 private:



};
}
#endif // PATH_H
